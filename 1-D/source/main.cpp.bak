#include <boost/program_options.hpp>
#include <boost/lexical_cast.hpp>
namespace po = boost::program_options;

#include <stdlib.h>
#include <iostream>
#include <fstream>

#include <Eigen/Dense>
#include <Eigen/Sparse>
#include <vector>
#include "geometry.h"
#include "dataWindow.h"
#include "hdf5.h"

using namespace std;
using namespace Eigen;

// A helper function to simplify the main part.
template<class T>
ostream& operator<<(ostream& os, const vector<T>& v);
void stepInTime(SparseMatrix<double>* fd, SparseMatrix<double>* cd, Geometry* grid, double k, double h, double a);
//void writeH5(std::ofstream xdm5, string outputDir, Geometry* toGrid, int timeStep);

int main(int ac, char *av[]) {
    double cellCount = 0;
    double h = 0.0;
    double a_c = 0.0;
    double startT, endT, dt, ts;
    double refT;
    string bndryType;
    string config_file;
    string outputDir;

  try {
    //Set of options for Command Line
    po::options_description generic("Generic Options");
    generic.add_options() 
      ("help", "produce a help message")
      ("pF", po::value<string>(&config_file)->default_value("exampleParameters.cfg"), "name of a Parameter file")
    ;
    //Set of options for Config file
    po::options_description tokens("Parameters for stokes solver");
    tokens.add_options() 
      ("M", po::value<double>(&cellCount), "number of cells within the domain")
      ("startTime", po::value<double>(&startT), "Initial Time")
      ("endTime", po::value<double>(&endT), "End Time")
      ("timeWidth", po::value<double>(&dt), "Width of each time step")
      ("boundaryConditions", po::value<string>(&bndryType), "Type of Boundary Condition, (Periodic")
      ("referenceTemperature", po::value<double>(&refT), "Initial temperature within the domain")
      ("advectionConstant", po::value<double>(&a_c), "Diffusivity constant")
      ("outputDirectory", po::value<string>(&outputDir), "Output Directory")
    ;
    
    po::options_description cmdline_options;
    cmdline_options.add(generic).add(tokens);
    
    po::options_description config_file_options;
    config_file_options.add(tokens);
    
    po::positional_options_description pCF;
    pCF.add("pF", 1);
    
    po::variables_map vm;
    po::store(po::command_line_parser(ac, av).
              options(cmdline_options).positional(pCF).run(), vm);
    po::notify(vm);

    ifstream ifs(config_file.c_str());
    if(!ifs) {
      cout << "Could not open parameter file: " << config_file << "\n";
      return 0;
    }
    else
    {
      po::store(po::parse_config_file(ifs, config_file_options), vm);
      notify(vm);
    }

    if(vm.count("help")) {
      cout << cmdline_options << "\n";
      return 0;
    }
    else if(vm.count("pF")) {
      cout << "Parameter File has been set to: " << config_file << "\n";
    }
  }
  catch(exception& e) {
    cerr << "error: " << e.what() << "\n";
    return 1;
  }	
  catch(...) {
    cerr << "exception of unknown type";
    return 1;
  }

  //Initializing the Problem
  h = 1/cellCount;
  ts = (endT-startT)/dt;
  Geometry grid(cellCount, h, refT); 
  Geometry* toGrid = &grid;
  int n = (int) toGrid->getM();
  int i,j;
  cout << "Spacing of adjacent cells is: " << h << "\n";
  cout << "Number of Time Steps is set to: " << ts << "\n";
// ----------------------------
//First Order Difference
  SparseMatrix<double,ColMajor> lfds(grid.getM(), grid.getM());  
//Second Order Difference
  Eigen::SparseMatrix<double,ColMajor> lfda(grid.getM(), grid.getM());  
  /*vector<Triplet<double> > fdTmp, cdTmp;
  fdTmp.reserve(2);
  cdTmp.reserve(2);
  fdTmp.push_back(Triplet<double>(1,3,2));
  cdTmp.push_back(Triplet<double>(1,3,2));
  fd1.setFromTriplets(fdTmp.begin(),fdTmp.end());
  cd1.setFromTriplets(cdTmp.begin(), cdTmp.end()); 
  */
  lfda.reserve(VectorXi::Constant(n,2));
  lfds.reserve(VectorXi::Constant(n,2));
  
  for(j = 0; j < n; j++) {
    for(i= 0; i < n; i++) {  
      if(i==(j-1)) { 
        lfda.insert(i,j) = 1;
        lfds.insert(i,j) = 1;
      }
      else if((i-1)==j) {
        lfds.insert(i,j) = -1;
        lfda.insert(i,j) = 1;
      }
    }
  }
  
  lfda.makeCompressed();
  lfds.makeCompressed();
 //Initializing output
  std::ofstream xdmfFile;
  xdmfFile.open((outputDir + "/advection-series.xdmf").c_str(), ofstream::out);
  xdmfFile << "<?xml version=\"1.0\"?>" << endl
           << "<!DOCTYPE Xdmf SYSTEM \"Xdmf.dtd\" []>" << endl
           << "<Xdmf Version=\"2.0\">" << endl
           << "  <Domain>" << endl
           << "    <Grid Name=\"CellTime\" GridType=\"Collection\" CollectionType=\"Temporal\">" << endl;
  DataWindow<double> tWindow (grid.getT(), grid.getM(), 1);
  cout << "original" << endl;
  cout << tWindow.displayMatrix() << endl; 
  for( i=0; i<ts; i++) { 
    stepInTime(&lfda, &lfds, toGrid, dt, h, a_c);
    DataWindow<double> tWindow (grid.getT(), grid.getM(), 1);
    cout << "Twindow" << endl;
    cout << tWindow.displayMatrix() << endl; 
    //writeH5(xdmfFile, outputDir, toGrid, i);
  }
 
  xdmfFile << "    </Grid>" << endl
           << "  </Domain>" << endl
           << "</Xdmf>" << endl; 
  xdmfFile.close();

  return 0;
}

template<class T>
ostream& operator<<(ostream& os, const vector<T>& v)
{
    copy(v.begin(), v.end(), ostream_iterator<T>(os, " "));
    return os;
}

void stepInTime(SparseMatrix<double>* lfda, SparseMatrix<double>* lfds, Geometry* grid, double k, double h, double a) {
  //cout << *lfda << endl;
  //cout << *lfds << endl;
  int n = (int) grid->getM();
  Eigen::Matrix<double, Dynamic, 1> u_j, u_j_1;
  u_j.resize(n,1);
  u_j_1.resize(n,1);
  for(int i = 0; i < n; i++) {
    u_j(i) = *(grid->getT()+i);
  }
  //Lax-Friedrichs Method
  double c = (k*a)/(2*h);
  //u_j_1 = 1/2 * (*lfda) * u_j - c * (*lfds) * u_j;
  u_j_1 = (*lfda) * u_j - (*lfds) * u_j;
  //Updating Temperature data 
  double* T = grid->getT();
  for(int i = 0; i < n; i++) {
    *(T+i) = u_j_1(i);
  }     
}

/*void writeH5(ofstream xdmfFile, string outputDir, Geometry* toGrid, int timeStep, ) {
  hid_t file_id;
  string fileName = "xdmf1d";
  file_id = H5Fcreate((outputDir + "/" + fileName + "-" + boost::lexical_cast<std::string> (timeStep) + ".h5").c_str(), H5F_ACC_TRUN, H5P_DEFAULT, H5p_DEFAULT);
  cout << "<Outputting current data to \"" << outputDir << "/" << fileName  << "-" << timestep << ".h5\">" << endl;
  
  xdmfFile << "      <Grid Name=\"mesh\" GridType=\"Uniform\">" << endl
           << "        <Time Value=\"" << timeStep << "\"/>" << endl
           << "        <Topology TopologyType=\"1DCoRectMesh\" NumberOfElements=\"" << M + 1 << " " << N + 1<< "\"/>" << endl
                  << "        <Geometry GeometryType=\"Origin_DxDy\">" << endl
                  << "          <DataItem Dimensions=\"2\">" << endl
                  << "            0 0" << endl
                  << "          </DataItem>" << endl
                  << "          <DataItem Dimensions=\"2\">" << endl
                  << "            " << dx << " " << dx << endl
                  << "          </DataItem>" << endl
                  << "        </Geometry>" << endl;  
  
        
}*/

//void stepInTime(double* td, double n, double ts) {
/*void stepInTime(Geometry* grid) {
  int n = grid->getM();
  //MatrixXd A = MatrixXd::Constant(n,n,0);
  SparseMatrix<double, ColMajor> A(n,n);

  A.setFromTriplets(T.begin(),T.end());
  SparseLU<SparseMatrix<double, ColMajor> > solver;
  solver.analyzePattern(A);
  solver.factorize(A);

    
  cout << A << endl;
  return;
}*/

